/*****************************************************************************/
/* The List builder is there to make sure that we don't reimplement the
 * function createFromItems every single time.
 * That method is important because it's the one that let's us use the syntax
 * MyCollection[a, b, c].
 */
/*****************************************************************************/

module LList;

/*****************************************************************************/
/* The generic builder, extend this class to create a new kind of collection.
 */
/*****************************************************************************/

base class LListBuilder<T, Info: TInfo<T>> final (llist: LList<T, Info>) {
  static deferred fun create(): Info;

  static deferred fun createFromItems(elts: Array<T>): LList<T, Info> {
    size = elts.size();
    llist: LList<T, Info> = LNil(static::create());
    for (i in Range(0, size)) {
      !llist = LList::cons(elts[size - i - 1], llist);
    };
    llist
  }
}

/*****************************************************************************/
/* A list that maintains its length. */
/*****************************************************************************/

base class LengthInfo<T>{length: Int = 0} uses TInfo<T> {
  fun add(_head: T): LengthInfo<T> {
    !this.length = this.length + 1;
    this
  }
}

class EmptyLengthInfo<T> extends LengthInfo<T>

class LengthList<T> extends LListBuilder<T, LengthInfo<T>> {
  static fun create(): LengthInfo<T> {
    EmptyLengthInfo{}
  }
}

/*****************************************************************************/
/* A list that maintains its minimum element. */
/*****************************************************************************/

base class MinInfo<T: Orderable>{candidate: ?T = None()} uses TInfo<T> {
  fun add(head: T): MinInfo<T> {
    this.candidate match {
    | None() -> !this.candidate = Some(head)
    | Some(x) if (head < x) -> !this.candidate = Some(head)
    | _ -> void
    };
    this
  }
}

class EmptyMinInfo<T: Orderable> extends MinInfo<T>

class MinList<T: Orderable> extends LListBuilder<T, MinInfo<T>> {
  static fun create(): MinInfo<T> {
    EmptyMinInfo{}
  }
}
