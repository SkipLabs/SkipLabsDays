module LList;

/*****************************************************************************/
/* The trait TInfo defines the set of operations that need to be implemented
 * by a "information class".
 * The function add corresponds at the function that will be called when an
 * elemented is added to the list.*/
/*****************************************************************************/

trait TInfo<T> {
  fun add(head: T): inst;
}

/*****************************************************************************/
/* The main type (defining LList). */
/*****************************************************************************/

base class .LList<T, Info: TInfo<T>> {
  children =
  | LNil(Info)
  | LCons(Info, T, LList<T, Info>)

  fun getInfo(): Info {
    this match {
    | LNil(info) -> info
    | LCons(info, _, _) -> info
    }
  }

  static fun nil(info: Info): LList<T, Info> {
    LNil(info)
  }

  static fun cons(head: T, tail: LList<T, Info>): LList<T, Info> {
    LCons(tail.getInfo().add(head), head, tail)
  }

  // Note the constraints [Info: LengthInfo<T>] should be read:
  // the function lenght is only present when Info extends LengthInfo
  fun length[Info: LengthInfo<T>](): Int {
    this.getInfo().length
  }

  fun min[T: Orderable, Info: MinInfo<T>](): ?T {
    this.getInfo().candidate
  }
}
